[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Kuba\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Kuba\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Amazon.com Inc. Java 17.0.9)
[debug]       Load.loadUnit: plugins took 77.5602ms
[debug]       Load.loadUnit: defsScala took 0.205ms
[debug] [Loading] Scanning directory C:\Users\Kuba\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Kuba\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.115 ms
[debug]           Load.resolveProject(global-plugins) took 32.9845ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Kuba\.sbt\1.0\plugins, plugins: List(<none>))) took 60.7483ms
[debug] [Loading] Done in C:\Users\Kuba\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 78.3585ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1713ms
[debug]     Load.loadUnit(file:/C:/Users/Kuba/.sbt/1.0/plugins/, ...) took 162.7683ms
[debug]   Load.apply: load took 359.8341ms
[debug]   Load.apply: resolveProjects took 6.0024ms
[debug]   Load.apply: finalTransforms took 69.4277ms
[debug]   Load.apply: config.delegates took 7.3073ms
[debug]   Load.apply: Def.make(settings)... took 448.1136ms
[debug]   Load.apply: structureIndex took 98.8787ms
[debug]   Load.apply: mkStreams took 1.6904ms
[info] loading global plugins from C:\Users\Kuba\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2451.2314ms
[debug]           Load.loadUnit: plugins took 24.2081ms
[debug]           Load.loadUnit: defsScala took 0.0058ms
[debug] [Loading] Scanning directory C:\Users\Kuba\Desktop\Ecom\backend\services\InventoryService\project
[debug]             Load.loadUnit: mkEval took 7.1459ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Kuba\Desktop\Ecom\backend\services\InventoryService\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6145 ms
[info] loading settings for project inventoryservice-build from idea.sbt ...
[debug]               Load.resolveProject(inventoryservice-build) took 5.642ms
[debug]             Load.loadTransitive: finalizeProject(Project(id inventoryservice-build, base: C:\Users\Kuba\Desktop\Ecom\backend\services\InventoryService\project, plugins: List(<none>))) took 8.9595ms
[debug] [Loading] Done in C:\Users\Kuba\Desktop\Ecom\backend\services\InventoryService\project, returning: (inventoryservice-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 150.3486ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.9119ms
[debug]         Load.loadUnit(file:/C:/Users/Kuba/Desktop/Ecom/backend/services/InventoryService/project/, ...) took 184.8317ms
[debug]       Load.apply: load took 186.8696ms
[debug]       Load.apply: resolveProjects took 0.1609ms
[debug]       Load.apply: finalTransforms took 13.3338ms
[debug]       Load.apply: config.delegates took 0.6259ms
[debug]       Load.apply: Def.make(settings)... took 120.022ms
[debug]       Load.apply: structureIndex took 48.8186ms
[debug]       Load.apply: mkStreams took 0.0026ms
[info] loading project definition from C:\Users\Kuba\Desktop\Ecom\backend\services\InventoryService\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1795.7459ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\Kuba\Desktop\Ecom\backend\services\InventoryService
[debug]       Load.loadUnit: mkEval took 0.4598ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.0435 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 52.6965ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Kuba\Desktop\Ecom\backend\services\InventoryService, plugins: List(<none>))) took 57.0661ms
[debug] [Loading] Done in C:\Users\Kuba\Desktop\Ecom\backend\services\InventoryService, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3305.2706ms
[debug]     Load.loadUnit: cleanEvalClasses took 27.4874ms
[debug]   Load.loadUnit(file:/C:/Users/Kuba/Desktop/Ecom/backend/services/InventoryService/, ...) took 5129.6897ms
[debug] Load.apply: load took 5131.5425ms
[debug] Load.apply: resolveProjects took 0.2522ms
[debug] Load.apply: finalTransforms took 34.9871ms
[debug] Load.apply: config.delegates took 0.4309ms
[debug] Load.apply: Def.make(settings)... took 114.8758ms
[debug] Load.apply: structureIndex took 36.527ms
[debug] Load.apply: mkStreams took 0.0043ms
[info] set current project to InventoryService (in build file:/C:/Users/Kuba/Desktop/Ecom/backend/services/InventoryService/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61504 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61504, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to InventoryService (in build file:/C:/Users/Kuba/Desktop/Ecom/backend/services/InventoryService/)
[debug] > Exec(idea-shell, None, None)
